zd[zd$t == i,"move1"] <- ifelse(sum(zd[c(ifelse(i-10 < 0, 0, (i-10)):i),"move2"] == "DEFECT", na.rm = T) > 1, "DEFECT", "COOPERATE")
}
if (p2 == "grudger"){
zd[zd$t == 0,"move2"] <- "COOPERATE"
zd[zd$t == i,"move2"] <- ifelse(sum(zd[c(ifelse(i-10 < 0, 0, (i-10)):i),"move1"] == "DEFECT", na.rm = T) > 1, "DEFECT", "COOPERATE")
}
#### Mindreader
if (p1 == "mindreader"){
zd1 <- subset(zd, t < i & t > i - 20)
zd1$move1 <- ifelse(zd1$move1 == "COOPERATE", 1, 0)
zd1$move2 <- ifelse(zd1$move2 == "COOPERATE", 1, 0)
zd.glm <- glm(move2 ~ move1, data = zd1, family = binomial())
zd2 <- data.frame("move1" = sample(c(0,1), 100, replace = T), "punish" = NA)
zd2$move2 <- predict.glm(zd.glm, newdata = zd2, "response")
zd2$move2 <- ifelse(zd2$move2 > 0.5, 1, 0)
#does player 2 punish player 1 for defection?
for (nn in 1:(nrow(zd2)-1)){
zd2[nn, "punish"] <- ifelse(zd2[nn, "move1"] == 0 & zd2[nn + 1,"move2"] != 0, 1, 0)
}
zd[zd$t == i, "move1"] <- ifelse(mean(zd2$punish, na.rm = T) > 0.3, "DEFECT","COOPERATE")
}
#### scoring
zd[zd$t == i, "score1"] <- score(zd[zd$t == i, "move1"], zd[zd$t == i, "move2"])
zd[zd$t == i, "score2"] <- score(zd[zd$t == i, "move2"], zd[zd$t == i, "move1"])
zd[zd$t == i, "meanscore1"] <- mean(zd[,"score1"], na.rm = T)
zd[zd$t == i, "meanscore2"] <- mean(zd[,"score2"], na.rm = T)
zd[zd$t == i, "scoresum1"] <- sum(zd[,"score1"], na.rm = T)
zd[zd$t == i, "scoresum2"] <- sum(zd[,"score2"], na.rm = T)
}
return(zd)
}
zd2
opposite_move <- function(move){
if (move == "DEFECT"){
return("COOPERATE")
}
if (move == "COOPERATE"){
return("DEFECT")
}
}
score <- function(my_move, opponents_move){
if(my_move == "DEFECT" & opponents_move == "DEFECT" & !is.na(my_move == "DEFECT" & opponents_move == "DEFECT" )){
return(1)}
if(my_move == "COOPERATE" & opponents_move == "DEFECT" & !is.na(my_move == "COOPERATE" & opponents_move == "DEFECT")){
return(0)}
if(my_move == "DEFECT" & opponents_move == "COOPERATE" & !is.na(my_move == "DEFECT" & opponents_move == "COOPERATE" )){
return(5)}
if(my_move == "COOPERATE" & opponents_move == "COOPERATE" & !is.na(my_move == "COOPERATE" & opponents_move == "COOPERATE")){
return(3)}
}
IPD <- function(p1, p2, n_matches = 10, extort_factor){
zd <- data.frame("t" = 0:n_matches, "move1" = NA, "move2" = NA, "score1" = NA, "score2" = NA, "meanscore1" = NA, "meanscore2" = NA, "scoresum1" = NA,"scoresum2" = NA)
zd[zd$t == 0, "score1"] <- 0
zd[zd$t == 0, "score2"] <- 0
zd[zd$t == 0, "move2"] <- "COOPERATE"
zd[zd$t == 0, "move1"] <- "COOPERATE"
for (i in 1:n_matches){
### Pavlov
if (p1 == "Pavlov"){
zd[zd$t == i, "move1"] <-ifelse(zd[zd$t == i - 1, "score1"] <= 1,
opposite_move(zd[zd$t == i - 1, "move1"]),
zd[zd$t == i - 1, "move1"])
}
if (p2 == "Pavlov"){
zd[zd$t == i, "move2"] <-ifelse(zd[zd$t == i -1, "score2"] <= 1,
opposite_move(zd[zd$t == i - 1, "move2"]),
zd[zd$t == i - 1, "move2"])
}
###TFT
if (p1 == "TFT"){
zd[zd$t == 0, "move1"] <- "COOPERATE"
zd[zd$t == i, "move1"] <-  zd[zd$t == i - 1, "move2"]
}
if (p2 == "TFT"){
zd[zd$t == 0, "move2"] <- "COOPERATE"
zd[zd$t == i, "move2"] <- zd[zd$t == i - 1, "move1"]
}
####Random
if (p2 == "Random"){
zd[zd$t == 0, "move2"] <- sample(c("COOPERATE","DEFECT"), 1)
zd[zd$t == i, "move2"] <- sample(c("COOPERATE","DEFECT"), 1)
}
if (p1 == "Random"){
zd[zd$t == 0, "move1"] <- sample(c("COOPERATE","DEFECT"), 1)
zd[zd$t == i, "move1"] <- sample(c("COOPERATE","DEFECT"), 1)
}
####Always Defect
if (p1 == "AD"){
zd[zd$t == 0, "move1"] <- "DEFECT"
zd[zd$t == i, "move1"] <- "DEFECT"
}
if (p2 == "AD"){
zd[zd$t == 0, "move2"] <- "DEFECT"
zd[zd$t == i, "move2"] <- "DEFECT"
}
####Always Cooperate
if (p1 == "AC"){
zd[zd$t == 0, "move1"] <- "COOPERATE"
zd[zd$t == i, "move1"] <- "COOPERATE"
}
if (p2 == "AC"){
zd[zd$t == 0, "move2"] <- "COOPERATE"
zd[zd$t == i, "move2"] <- "COOPERATE"
}
#### Extortion
if (p1 == "Extortion"){
zd[zd$t == 0, "move1"] <- "COOPERATE"
if(zd[zd$t == (i - 1) , "move1"] == "COOPERATE" & zd[zd$t == (i - 1) , "move2"] == "COOPERATE" & !is.na(zd[zd$t == i - 1 , "move1"] == "COOPERATE" & zd[zd$t == i - 1 , "move2"] == "COOPERATE")){
zd[zd$t == i , "move1"] <- ifelse(runif(1) < (1 - (2 * extort_factor - 2.) / (4. * extort_factor + 1.)), "COOPERATE", "DEFECT")
}
if(zd[zd$t == (i - 1) , "move1"] == "DEFECT" & zd[zd$t == (i - 1) , "move2"] == "DEFECT" & !is.na(zd[zd$t == i - 1 , "move1"] == "DEFECT" & zd[zd$t == i - 1 , "move2"] == "DEFECT")){
zd[zd$t == i , "move1"] <-  "DEFECT"
}
if(zd[zd$t == i - 1 , "move1"] == "COOPERATE" & zd[zd$t == i - 1 , "move2"] == "DEFECT" & !is.na(zd[zd$t == i - 1 , "move1"] == "COOPERATE" & zd[zd$t == i - 1 , "move2"] == "DEFECT")){
zd[zd$t == i , "move1"] <-  "DEFECT"
}
if(zd[zd$t == i - 1 , "move1"] == "DEFECT" & zd[zd$t == i - 1 , "move2"] == "COOPERATE" & !is.na(zd[zd$t == i - 1 , "move1"] == "DEFECT" & zd[zd$t == i - 1 , "move2"] == "COOPERATE")){
zd[zd$t == i , "move1"] <- ifelse(runif(1) < ((extort_factor + 4) / (4. * extort_factor + 1)), "COOPERATE", "DEFECT")
}
}
if (p2 == "Extortion"){
zd[zd$t == 0, "move2"] <- "COOPERATE"
if(zd[zd$t == i - 1 , "move2"] == "COOPERATE" & zd[zd$t == i - 1 , "move1"] == "COOPERATE" & !is.na(zd[zd$t == i - 1 , "move2"] == "COOPERATE" & zd[zd$t == i - 1 , "move1"] == "COOPERATE")){
zd[zd$t == i , "move2"] <- ifelse(runif(1) < (1 - (2 * extort_factor - 2.) / (4. * extort_factor + 1.)), "COOPERATE", "DEFECT")
}
if(zd[zd$t == i - 1 , "move2"] == "DEFECT" & zd[zd$t == i - 1 , "move1"] == "DEFECT" & !is.na(zd[zd$t == i - 1 , "move2"] == "DEFECT" & zd[zd$t == i - 1 , "move1"] == "DEFECT")){
zd[zd$t == i , "move2"] <-  "DEFECT"
}
if(zd[zd$t == i - 1 , "move2"] == "COOPERATE" & zd[zd$t == i - 1 , "move1"] == "DEFECT" & !is.na(zd[zd$t == i - 1 , "move2"] == "COOPERATE" & zd[zd$t == i - 1 , "move1"] == "DEFECT")){
zd[zd$t == i , "move2"] <-  "DEFECT"
}
if(zd[zd$t == i - 1 , "move2"] == "DEFECT" & zd[zd$t == i - 1 , "move1"] == "COOPERATE" & !is.na(zd[zd$t == i - 1 , "move2"] == "DEFECT" & zd[zd$t == i - 1 , "move1"] == "COOPERATE")){
zd[zd$t == i , "move2"] <- ifelse(runif(1) < ((extort_factor + 4) / (4. * extort_factor + 1)), "COOPERATE", "DEFECT")
}
}
##### go by majority, memory == 20
if (p1 == "gobymajority"){
zd[zd$t == 0, "move1"] <- "COOPERATE"
zd[zd$t == i, "move1"] <- ifelse(sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move2"] == "COOPERATE", na.rm = T) >= sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move2"] == "DEFECT", na.rm = T), "COOPERATE", "DEFECT")
}
if (p2 == "gobymajority"){
zd[zd$t == 0, "move2"] <- "COOPERATE"
zd[zd$t == i, "move2"] <- ifelse(sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move1"] == "COOPERATE", na.rm = T) >= sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move1"] == "DEFECT", na.rm = T), "COOPERATE", "DEFECT")
}
#### my majority vs their majority
if (p1 == "majorityvsmajority"){
zd[zd$t == 0, "move1"] <- "COOPERATE"
zd[zd$t == i, "move1"] <- ifelse(sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move1"] == "COOPERATE", na.rm = T) > sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move2"] == "COOPERATE", na.rm = T), "DEFECT", "COOPERATE")
}
if (p2 == "majorityvsmajority"){
zd[zd$t == 0, "move2"] <- "COOPERATE"
zd[zd$t == i, "move2"] <- ifelse(sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move2"] == "COOPERATE", na.rm = T) > sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move1"] == "COOPERATE", na.rm = T), "DEFECT", "COOPERATE")
}
#### my majority vs their majority, random
if (p1 == "majorityvsmajorityrandom"){
zd[zd$t == 0, "move1"] <- "COOPERATE"
zd[zd$t == i, "move1"] <- ifelse(sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move1"] == "COOPERATE", na.rm = T) > sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move2"] == "COOPERATE", na.rm = T), sample(c("DEFECT", "COOPERATE"), 1), "COOPERATE")
}
if (p2 == "majorityvsmajorityrandom"){
zd[zd$t == 0, "move2"] <- "COOPERATE"
zd[zd$t == i, "move2"] <- ifelse(sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move2"] == "COOPERATE", na.rm = T) > sum(zd[c(ifelse(i-20 < 0, 0, (i-20)):i),"move1"] == "COOPERATE", na.rm = T), sample(c("DEFECT", "COOPERATE"), 1), "COOPERATE")
}
##### Grudger
if (p1 == "grudger"){
zd[zd$t == 0,"move1"] <- "COOPERATE"
zd[zd$t == i,"move1"] <- ifelse(sum(zd[c(ifelse(i-10 < 0, 0, (i-10)):i),"move2"] == "DEFECT", na.rm = T) > 1, "DEFECT", "COOPERATE")
}
if (p2 == "grudger"){
zd[zd$t == 0,"move2"] <- "COOPERATE"
zd[zd$t == i,"move2"] <- ifelse(sum(zd[c(ifelse(i-10 < 0, 0, (i-10)):i),"move1"] == "DEFECT", na.rm = T) > 1, "DEFECT", "COOPERATE")
}
#### Mindreader
if (p2 == "mindreader"){
zd1 <- subset(zd, t < i & t > i - 20)
zd1$move1 <- ifelse(zd1$move1 == "COOPERATE", 1, 0)
zd1$move2 <- ifelse(zd1$move2 == "COOPERATE", 1, 0)
zd.glm <- glm(move1 ~ move2, data = zd1, family = binomial())
z.d2 <- data.frame("move2" = sample(c(0,1), 100, replace = T), "punish" = NA)
z.d2$move1 <- predict.glm(zd.glm, newdata = z.d2, "response")
z.d2$move1 <- ifelse(z.d2$move1 > 0.3, 1, 0)
#does player 2 punish player 1 for defection?
for (nn in 1:(nrow(z.d2)-1)){
z.d2[nn, "punish"] <- ifelse(z.d2[nn, "move2"] == 0 & z.d2[nn + 1,"move1"] != 0, 1, 0)
}
zd[zd$t == i, "move2"] <- ifelse(mean(z.d2$punish, na.rm = T) > 0.3, "DEFECT","COOPERATE")
}
#### scoring
zd[zd$t == i, "score1"] <- score(zd[zd$t == i, "move1"], zd[zd$t == i, "move2"])
zd[zd$t == i, "score2"] <- score(zd[zd$t == i, "move2"], zd[zd$t == i, "move1"])
zd[zd$t == i, "meanscore1"] <- mean(zd[,"score1"], na.rm = T)
zd[zd$t == i, "meanscore2"] <- mean(zd[,"score2"], na.rm = T)
zd[zd$t == i, "scoresum1"] <- sum(zd[,"score1"], na.rm = T)
zd[zd$t == i, "scoresum2"] <- sum(zd[,"score2"], na.rm = T)
}
return(zd)
}
IPD("TFT","mindreader, n_matches = 100)
IPD("TFT","mindreader", n_matches = 100)
IPD("grudger","mindreader", n_matches = 100)
IPD("AC","mindreader", n_matches = 100)
options(warn=-1)
strategies <- c("Pavlov","TFT","AC","AD","Random","Extortion","gobymajority","majorityvsmajority","majorityvsmajorityrandom","grudger", "mindreader")
s.list <- list()
for (ss in strategies){
zd.list <- list()
for (ee in seq(from = 1, to = 13, by = 0.1)){
df <- IPD(p1 ="Extortion", p2 = ss, extort_factor = ee, n_matches = 1000)
df$extort_factor <- ee
zd.list[[as.character(ee)]] <- df
}
df.s <- do.call(rbind, zd.list)
df.s$strategy <- ss
s.list[[ss]] <- df.s
}
df.strategies <- do.call(rbind, s.list)
df.strategies$p1statenum <- ifelse(df.strategies$move1 == "COOPERATE", 1, 0)
df.strategies$p2statenum <- ifelse(df.strategies$move2 == "COOPERATE", 1, 0)
##
##  Java Information Dynamics Toolkit (JIDT)
##  Copyright (C) 2012, Joseph T. Lizier
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/lib/server/libjvm.dylib'))
library(rJava)
library(dplyr)
setwd('/Users/Home1/Desktop/Classes/Spring_2018/Complex_adaptive_systems/infodynamics-dist-1.4')
.jinit(".")
.jaddClassPath("/Users/Home1/Desktop/Classes/Spring_2018/Complex_adaptive_systems/infodynamics-dist-1.4/infodynamics.jar")
strat.list <- list()
system.time(
for (ii in unique(df.strategies$strategy)){
zd2 <- subset(df.strategies, strategy == ii)
extort.list <- list()
for (i in seq(from = 1, to = 13, by = 0.1)){
# Create a TE calculator and run it:
teCalc<-.jnew("infodynamics/measures/discrete/TransferEntropyCalculatorDiscrete",
2L,
1L)
.jcall(teCalc,
"V",
"initialise") # V for void return value
.jcall(teCalc,
"V",
"addObservations",
as.integer(subset(df.strategies, extort_factor == i)$p1statenum),
as.integer(subset(df.strategies, extort_factor == i)$p2statenum))
result1 <- .jcall(teCalc,
"D",
"computeAverageLocalOfObservations")
teCalc<-.jnew("infodynamics/measures/discrete/TransferEntropyCalculatorDiscrete",
2L,
1L)
.jcall(teCalc,
"V",
"initialise") # V for void return value
.jcall(teCalc,
"V",
"addObservations",
as.integer(subset(df.strategies, extort_factor == i)$p2statenum),
as.integer(subset(df.strategies, extort_factor == i)$p1statenum))
result2 <- .jcall(teCalc,"D","computeAverageLocalOfObservations")
extort.list[[as.character(i)]] <- data.frame(result1, result2, "Extortion" = i)
}
df1 <- do.call(rbind, extort.list)
df1 <- data.frame(df1, "Strategy" = ii)
strat.list[[ii]] <- df1
}
)
strat.df <- do.call(rbind, strat.list)
options(warn=0)
save(strat.df, file = "~/Desktop/strat_df2.rda")
save(df_strategies, file = "~/Desktop/df_strategies2.rda")
save(df.strategies, file = "~/Desktop/df_strategies2.rda")
head(df.strategies)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue") + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red")
library(ggplot2)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue") + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red")
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red"))
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
head(strat.df)
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy)
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
head(df.strategies)
ggplot(df.strategies) + geom_line(aes(t,mean(score1, na.rm = T))) + facet_wrap(~strategy)
ggplot(df.strategies) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, extort_factor = c(1,3,5,10)) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, extort_factor = c(1,3,5,10))) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, extort_factor = 1)) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, extort_factor = 1 & t <= 100)) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, t <= 100)) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, t <= 40)) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
head(df.strategies
)
ggplot(subset(df.strategies, t <= 40 & extort_factor = 1)) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, t <= 40 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = extort_factor)) + facet_wrap(~strategy)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy)
save(strat.df, file = "~/Desktop/strat_df3.rda")
save(df.strategies, file = "~/Desktop/df_strategies3.rda")
df.strat.len <- df.strategies %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(result1)),
"r2" = length(unique(result2)))
head(df.strat.len)
ggplot(df.strat.len) + geom_point(aes(extort_factor, r1), color = "blue") + geom_point(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy)
length(unique(df.strategies$result1))
unique(df.strategies$result1)
head(df.strategies)
df.strat.len <- df.strategies %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_point(aes(extort_factor, r1), color = "blue") + geom_point(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy)
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_point(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy)
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy)
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores")
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy)
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/lib/server/libjvm.dylib'))
library(rJava)
library(dplyr)
setwd('/Users/Home1/Desktop/Classes/Spring_2018/Complex_adaptive_systems/infodynamics-dist-1.4')
.jinit(".")
.jaddClassPath("/Users/Home1/Desktop/Classes/Spring_2018/Complex_adaptive_systems/infodynamics-dist-1.4/infodynamics.jar")
strat.list <- list()
system.time(
for (ii in unique(df.strategies$strategy)){
zd2 <- subset(df.strategies, strategy == ii)
extort.list <- list()
for (i in seq(from = 1, to = 13, by = 0.1)){
# Create a TE calculator and run it:
teCalc<-.jnew("infodynamics/measures/discrete/TransferEntropyCalculatorDiscrete",
2L,
1L)
.jcall(teCalc,
"V",
"initialise") # V for void return value
.jcall(teCalc,
"V",
"addObservations",
as.integer(subset(zd2, extort_factor == i)$p1statenum),
as.integer(subset(zd2, extort_factor == i)$p2statenum))
result1 <- .jcall(teCalc,
"D",
"computeAverageLocalOfObservations")
teCalc<-.jnew("infodynamics/measures/discrete/TransferEntropyCalculatorDiscrete",
2L,
1L)
.jcall(teCalc,
"V",
"initialise") # V for void return value
.jcall(teCalc,
"V",
"addObservations",
as.integer(subset(zd2, extort_factor == i)$p2statenum),
as.integer(subset(zd2, extort_factor == i)$p1statenum))
result2 <- .jcall(teCalc,"D","computeAverageLocalOfObservations")
extort.list[[as.character(i)]] <- data.frame(result1, result2, "Extortion" = i)
}
df1 <- do.call(rbind, extort.list)
df1 <- data.frame(df1, "Strategy" = ii)
strat.list[[ii]] <- df1
}
)
strat.df <- do.call(rbind, strat.list)
save(strat.df, file = "~/Desktop/strat_df3.rda")
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy)
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw()
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_fill_distiller(palette = "Spectral", names = "Extort Factor")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_fill_distiller(palette = "Spectral", name = "Extort Factor")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_fill_distiller(palette = "Spectral", name = "Extort Factor")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_distiller(palette = "Spectral", name = "Extort Factor")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(sort(extort_factor)))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggsave("~/Desktop/fig1CAS.jpg", h = 6, w = 4)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
ggsave("~/Desktop/fig1CAS.jpg", h = 6, w = 4)
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggsave("~/Desktop/fig2CAS.jpg", h = 6, w = 4)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
ggsave("~/Desktop/fig3CAS.jpg", h = 6, w = 4)
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggsave("~/Desktop/fig4CAS.jpg", h = 6, w = 4)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
ggsave("~/Desktop/fig1CAS.jpg", h = 6, w = 4)
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggsave("~/Desktop/fig2CAS.jpg", h = 6, w = 4)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
ggsave("~/Desktop/fig3CAS.jpg", h = 6, w = 4)
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggsave("~/Desktop/fig4CAS.jpg", h = 6, w = 4)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")
ggsave("~/Desktop/fig1CAS.jpg", h = 4, w = 6)
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggsave("~/Desktop/fig2CAS.jpg", h = 4, w = 6)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor")
ggsave("~/Desktop/fig3CAS.jpg", h = 4, w = 6)
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggsave("~/Desktop/fig4CAS.jpg", h = 4, w = 6)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("~/Desktop/fig3CAS.jpg", h = 4, w = 6)
ggplot(df.strategies) + geom_boxplot(aes(as.character(strategy),meanscore1),fill = "blue", outlier.shape = NA) + geom_boxplot(aes(as.character(strategy),meanscore2),fill = "red", outlier.shape = NA) + theme_bw() + scale_fill_manual(labels = c("Extortion", "Opponent"), values = c("blue","red")) + labs(x = "Strategy", y = "Mean Score (1000 steps)")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("~/Desktop/fig1CAS.jpg", h = 4, w = 6)
ggplot(strat.df) + geom_line(aes(Extortion, result1), color = "blue") + geom_line(aes(Extortion, result2), color = "red") + facet_wrap(~Strategy) + theme_bw() + labs(x = "Extortion Factor", y = "Transfer Entropy")
ggsave("~/Desktop/fig2CAS.jpg", h = 4, w = 6)
ggplot(subset(df.strategies, t <= 100 & extort_factor == c(1, 3, 7, 10))) + geom_line(aes(t,score1, color = as.character(extort_factor))) + facet_wrap(~strategy) + theme_bw() + labs(x = "Time", y = "Score") + scale_color_brewer(palette = "Spectral", name = "Extort Factor") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("~/Desktop/fig3CAS.jpg", h = 4, w = 6)
### how many possible values per strat as extortion factor increases?
df.strat.len <- subset(df.strategies, t > 100) %>%
group_by(extort_factor, strategy) %>%
summarize("r1" = length(unique(score1)),
"r2" = length(unique(score2)))
ggplot(df.strat.len) + geom_line(aes(extort_factor, r1), color = "blue") + geom_line(aes(extort_factor, r2), color = "red") + facet_wrap(~strategy) + labs(x = "Extortion Factor", y = "Possible Scores") + theme_bw()
ggsave("~/Desktop/fig4CAS.jpg", h = 4, w = 6)
shannonsH <- function(mystring){
freqs <- mystring / sum(mystring)
H <- -sum(freqs * log(freqs) / log(2))
return(H)
}
df.strat.entrop <- subset(df.strategies, t <= 100) %>%
group_by(extort_factor, strategy) %>%
summarize("ShannonH1" <- shannonsH(score1),
"ShannonH2" <- shannonsH(score2))
head(df.strat.entrop)
df.strat.entrop <- subset(df.strategies, t <= 100) %>%
group_by(extort_factor, strategy) %>%
summarize("ShannonH1" = shannonsH(score1),
"ShannonH2" = shannonsH(score2))
df.strat.entrop
shannonsH <- function(mystring){
freqs <- mystring / sum(mystring, na.rm = T)
H <- -sum(freqs * log(freqs) / log(2), na.rm = T)
return(H)
}
df.strat.entrop <- subset(df.strategies, t <= 100) %>%
group_by(extort_factor, strategy) %>%
summarize("ShannonH1" = shannonsH(score1),
"ShannonH2" = shannonsH(score2))
df.strat.entrop
ggplot(df.strat.entrop) + geom_line(aes(extort_factor, ShannonH1), color = "blue") + geom_line(aes(extort_factor, ShannonH2), color = "red") + facet_wrap(~strategy)
ggplot(df.strat.entrop) + geom_line(aes(extort_factor, ShannonH1), color = "blue") + geom_line(aes(extort_factor, ShannonH2), color = "red") + facet_wrap(~strategy) + theme_bw() +
labs(x = "Extortion Factor", y = "Shannon's H")
ggsave("~/Desktop/fig35CAS.jpg", h = 4, w = 6)
df.strat.entrop <- df.strategies %>%
group_by(extort_factor, strategy) %>%
summarize("ShannonH1" = shannonsH(score1),
"ShannonH2" = shannonsH(score2))
ggplot(df.strat.entrop) + geom_line(aes(extort_factor, ShannonH1), color = "blue") + geom_line(aes(extort_factor, ShannonH2), color = "red") + facet_wrap(~strategy) + theme_bw() +
labs(x = "Extortion Factor", y = "Shannon's H")
ggsave("~/Desktop/fig35CAS.jpg", h = 4, w = 6)
